@page "/"
@inject ISnackbar Snackbar

<MudTable Items="@CategoryDtos" Dense="true" Hover="true" 
                                Bordered="true" Striped="true"
                                Loading="@Loading"
                                Filter="new Func<CategoryDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Categories table</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" OnClick="OpenAddPage" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success">Add</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudIconButton @onclick="() => OpenEditPage(context.Id)" Icon="@Icons.Material.Filled.Edit" aria-label="edit"></MudIconButton>
        <MudIconButton @onclick="() => Delete(context.Id)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    @inject HttpClient httpClient
    @inject NavigationManager navigationManager
    private string searchString1 = "";
    private CategoryDto selectedItem1 = null;
    private HashSet<CategoryDto> selectedItems = new HashSet<CategoryDto>();
    private bool Loading = true;

    private List<CategoryDto> CategoryDtos = new List<CategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        var response = await httpClient.GetAsync($"{Constants.BaseUrl}/Category/getall");
        if (response.IsSuccessStatusCode)
        {
            CategoryDtos = (await response.Content.ReadFromJsonAsync<IEnumerable<CategoryDto>>())!.ToList();
            Loading = false;
        }
    }

    private bool FilterFunc1(CategoryDto element) => FilterFunc(element, searchString1);

    private bool FilterFunc(CategoryDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OpenAddPage()
    {
        navigationManager.NavigateTo("/categories/add");
    }

    private void OpenEditPage(int id)
    {
        navigationManager.NavigateTo($"/categories/edit/{id}");
    }

    private async void Delete(int id) 
    {
        var response = await httpClient.DeleteAsync($"{Constants.BaseUrl}/Category?id={id}");
        if (response.IsSuccessStatusCode)
        {
            CategoryDtos.Remove(CategoryDtos.FirstOrDefault(x => x.Id == id)!);
            StateHasChanged();
            Snackbar.Add($"Category deleted!", Severity.Success);
        }
        else 
        {
            Snackbar.Add(response.StatusCode.ToString(), Severity.Error);
        }
    }
}